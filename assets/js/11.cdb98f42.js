(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{372:function(t,s,a){"use strict";a.r(s);var n=a(45),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"我们的第一个插件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#我们的第一个插件"}},[t._v("#")]),t._v(" 我们的第一个插件")]),t._v(" "),a("p",[t._v("在 1.1 中我们了解了我们在编写插件时所要知道的一些基本概念和思想，现在，让我们正式展开插件的编写。这部分内容与 Java 本身紧密联系，对于一些特殊的概念将会加粗，然后在文中以插入块的形式具体讲解。")]),t._v(" "),a("p",[t._v("为了后文的叙述清楚，我们在这里约定：")]),t._v(" "),a("ul",[a("li",[t._v("我们的插件名称叫做 "),a("code",[t._v("MyPlugin")])]),t._v(" "),a("li",[t._v("我们的插件包名为 "),a("code",[t._v("com.example.myPlugin")]),t._v("，因此我们的"),a("strong",[t._v("主类")]),t._v("所在位置应当是 "),a("code",[t._v("/src/main/java/com/example/myPlugin")])]),t._v(" "),a("li",[t._v("我们的所有操作发生在 "),a("code",[t._v("/src/main/java/com/example/myPlugin")]),t._v(" 内，并将此地址简记为 "),a("code",[t._v("@")]),t._v(" "),a("ul",[a("li",[t._v("例如，"),a("code",[t._v("@/MyPlugin.java")]),t._v(" 则代表 "),a("code",[t._v("/src/main/java/com/example/myPlugin/MyPlugin.java")])])])]),t._v(" "),a("li",[t._v("我们的插件使用 Java 11 开发")])]),t._v(" "),a("p",[t._v("除非声明，否则均按照此处所列信息看待。")]),t._v(" "),a("h2",{attrs:{id:"主类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主类"}},[t._v("#")]),t._v(" 主类")]),t._v(" "),a("p",[a("strong",[t._v("主类")]),t._v("是插件的起点。你也许听说过 C++ 里的 "),a("code",[t._v("int main()")]),t._v(" 吧？那也是一个主类。主类可以认定为是整个程序的入口。那么既然它是主类，就必定有和其它「普通的类」有区别的地方——插件的主类继承了 "),a("code",[t._v("JavaPlugin")]),t._v(" 这个接口（此处的接口为 Java 内部概念，与前文叙述的不一致）。")]),t._v(" "),a("p",[t._v("接下来我们创建 "),a("code",[t._v("@/Main.java")]),t._v("，并将它看作主类，一个主类通常具有以下基本结构。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// @/Main.java")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("example"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("myPlugin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里指定了当前文件所在的包，根据文件所在的位置会有所变化。")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bukkit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Bukkit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 引入")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bukkit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("plugin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JavaPlugin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Main")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JavaPlugin")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("onEnable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("saveDefaultConfig")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getLogger")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("info")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"MyPlugin is enabled."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("onDisable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getLogger")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("info")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"MyPlugin is disabled."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[a("strong",[t._v("Java 语言讲堂 #1")])]),t._v(" "),a("p",[t._v("从这里开始，每相隔一两小节将会出现这样一个帮助你理解 Java 语言本身的小块，你可以选择性地阅读。内容不保证权威性，如需学习，请自行寻找专业教材，同时欢迎纠正。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("package <包名>")]),t._v(" 表达了当前文件所在的包，其与路径有关系。由于我们的 "),a("code",[t._v("Main.java")]),t._v(" 放置在 "),a("code",[t._v("@")]),t._v(" 下面，也就是 "),a("code",[t._v("/src/main/java/com/example/myPlugin")]),t._v(" 这个目录下，所以包名写作 "),a("code",[t._v("com.example.myPlugin")]),t._v("。\n"),a("ul",[a("li",[t._v("想一想：如果我将 "),a("code",[t._v("Main.java")]),t._v(" 放置在 "),a("code",[t._v("@/Utils")]),t._v(" 这个文件夹下面，包名应该写作什么？类比即可得出答案："),a("code",[t._v("com.example.myPlugin.Utils")]),t._v("。请注意：包名并不能随意地写。")])])]),t._v(" "),a("li",[a("code",[t._v("import <包名>")]),t._v(" 导入了相应包下的类、接口等元素。例如，"),a("code",[t._v("org.bukkit")]),t._v(" 是 "),a("code",[t._v("Bukkit")]),t._v(" 这个类的包名，如果我们要导入 "),a("code",[t._v("Bukkit")]),t._v("，我们就可以用 "),a("code",[t._v("org.bukkit.Bukkit")]),t._v(" 来代表它，然后 "),a("code",[t._v("import")]),t._v(" 它即可使用。")]),t._v(" "),a("li",[a("code",[t._v("public final class <类名>")]),t._v(" 中 "),a("code",[t._v("public")]),t._v(" 代表是「可以被外界访问的」，除此之外还有 "),a("code",[t._v("protected")]),t._v(" 和 "),a("code",[t._v("private")]),t._v(" 两种。主类只能为 "),a("code",[t._v("public")]),t._v(" 类。"),a("code",[t._v("final")]),t._v(" 表示「最终的」，即当前类不能被"),a("strong",[t._v("继承")]),t._v("。实际上，如果没有相关需求，"),a("code",[t._v("final")]),t._v(" 是否加上是没有影响的。")]),t._v(" "),a("li",[a("code",[t._v("extends <类/接口/...>")]),t._v(" 继承指定的对象。这是面向对象编程的特色，具体的含义不在这里详细讲解。但你可以尝试从字面意义上理解，「继承」即代表享有被继承对象所具有的项目。上面的 "),a("code",[t._v("final")]),t._v(" 关键字可以防止某个对象被继承。")]),t._v(" "),a("li",[a("code",[t._v("@Override")]),t._v(" 是一个 Java Annotation（注解），除此之外还有 "),a("code",[t._v("@Deprecated")]),t._v(" 等。它们相当于是可以影响编译行为的「小工具」。Override 单词本意是「覆盖」，在这里的意思是「覆盖父类的相关方法」。因为 "),a("code",[t._v("Main")]),t._v(" 这个类继承了 "),a("code",[t._v("JavaPlugin")]),t._v("，所以在它内部的方法上面加上 "),a("code",[t._v("@Override")]),t._v(" 就是在表明 "),a("code",[t._v("JavaPlugin")]),t._v(" 这个父类里面也有同名的方法，并要用子类的方法去覆盖它。这样做可以保证接口被准确实现。如果父类中不存在子类中被 "),a("code",[t._v("@Override")]),t._v(" 标注的方法，编译器将报错。")]),t._v(" "),a("li",[a("code",[t._v("void")]),t._v(" 是一种数据类型，它代表「无返回值」。Java 中用数据类型来表达一个函数，它同时也表示了这个函数的返回值类型。对于 "),a("code",[t._v("void")]),t._v(" 类函数来说，它们只负责「执行操作」而不返回任何值。")])]),t._v(" "),a("p",[t._v("ps: 一般将放置在对象里的函数称为这个对象的"),a("strong",[t._v("方法（method）")]),t._v("，被继承的类称为"),a("strong",[t._v("父类（parent）")]),t._v("，继承父类的类称为"),a("strong",[t._v("子类（child）")]),t._v("。")])]),t._v(" "),a("p",[t._v("一个标准的插件，应当拥有一个继承了 "),a("code",[t._v("JavaPlugin")]),t._v(" 的主类，并且这个主类里有带有 "),a("code",[t._v("@Override")]),t._v(" 注解的两个方法："),a("code",[t._v("void onEnable")]),t._v(" 和 "),a("code",[t._v("void onDisable")]),t._v("。它们的名称和调用方式是由 API 所规定的，并不能从外部更改，你可以将它看作为 API 作者为你开放的「打入插件的窗口」。")]),t._v(" "),a("p",[t._v("其中 "),a("code",[t._v("onEnable")]),t._v(" 这个函数在插件被启用的时候会被调用，而 "),a("code",[t._v("onDisable")]),t._v(" 则会在插件被禁用的时候被调用。如果一个插件本身没有问题，那么服务端在启动的时候就会自动启用这个插件，"),a("strong",[t._v("于是 "),a("code",[t._v("onEnable")]),t._v(" 也可以理解为在服务器启动的时候被调用。")])]),t._v(" "),a("p",[t._v("现在我们该如何写一个 Hello World 呢？其实上面的代码已经实现了这一点。根据上一段的解释，该插件在服务器启动的时候，会调用服务器的 Logger 输出一句 "),a("code",[t._v("MyPlugin is enabled.")]),t._v("；在服务器关闭的时候，会调用服务器的 Logger 输出一句 "),a("code",[t._v("MyPlugin is disabled.")]),t._v("。")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("如果插件内部出现错误，服务端会强行禁用它，并显示出报错。此时，"),a("code",[t._v("onDisable")]),t._v(" 也会被调用。")])]),t._v(" "),a("p",[t._v("具体的表现，大概是这样的：")]),t._v(" "),a("div",{staticClass:"language-log extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-log"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token level info keyword"}},[t._v("INFO")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("Preparing spawn area:")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token level info keyword"}},[t._v("INFO")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("Time elapsed:")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3849")]),t._v(" ms\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token level info keyword"}},[t._v("INFO")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MyPlugin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" Enabling MyPlugin "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("v1.0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("SNAPSHOT\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token level info keyword"}},[t._v("INFO")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MyPlugin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" MyPlugin is enabled"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 这里就是你的 Hello World"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token level info keyword"}},[t._v("INFO")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" Running delayed init tasks\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token level info keyword"}},[t._v("INFO")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" Done "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8.970s")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" For help"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" type "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"help"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token level info keyword"}},[t._v("INFO")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" Timings Reset\n")])])]),a("p",[t._v("Hello World 已经完成了，在实际的插件制作过程中，主类有着怎样的作用呢？实际上，我们一般在主类里面做的事情有如下几种")]),t._v(" "),a("ul",[a("li",[t._v("一些初始化的工作\n"),a("ul",[a("li",[t._v("配置文件")]),t._v(" "),a("li",[t._v("需要用到的动态类")]),t._v(" "),a("li",[t._v("与数据库的连接")])])]),t._v(" "),a("li",[t._v("显示一个欢迎的信息")]),t._v(" "),a("li",[t._v("其它工作")])]),t._v(" "),a("p",[t._v("看上去似乎都是一些准备工作，但不要小看，它们实际上为整个插件的工作奠定了基础。一个最简单的插件是不带任何指令和事件的，换言之，最简单的插件就是这样一个主类，它没有任何其它的东西。显然，这样没有意义，因为我们的插件没有任何功能性可言。我们为了让插件具有功能性，自然要添加的就有"),a("strong",[t._v("指令")]),t._v("，如果有需要的还可以添加"),a("strong",[t._v("事件")]),t._v("。它们的详细概念和具体介绍将会分章节提及，在这里我们将简单介绍它们与主类的关系。")]),t._v(" "),a("p",[t._v("根据 API 的设定，指令、事件等若想要发挥作用，必须经过"),a("strong",[t._v("注册")]),t._v("（或称设置，下面我们统称注册）。注册所调用的函数并不一样，但简单的过程概述就是——我们需要向一个特定的函数（也就是用来注册的函数）传入一个代表着我们的指令或者事件的对象。这个操作完成以后，我们就可以在游戏内执行指令，事件也可以发挥自己的作用。现在，我们需要思考")]),t._v(" "),a("ol",[a("li",[t._v("帮助我们注册的函数是什么？")]),t._v(" "),a("li",[t._v("传入的代表着指令或者事件的对象具体是什么？")]),t._v(" "),a("li",[t._v("它们发挥作用的表现是什么？")])]),t._v(" "),a("p",[t._v("我们先介绍注册函数。注册函数类似于一个工具，可以帮助我们把我们所写的有关指令和事件的定义「注册」到插件里去，让它们发挥作用。我们一般用到的注册函数有以下三个：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("org.bukkit.plugin.PluginManager.registerEvents(@NotNull Listener listener, @NotNull Plugin plugin)")])]),t._v(" "),a("li",[a("code",[t._v("org.bukkit.command.PluginCommand.setExecutor(@Nullable CommandExecutor executor)")])]),t._v(" "),a("li",[a("code",[t._v("org.bukkit.command.PluginCommand.setTabCompleter(@Nullable TabCompleter completer)")])])]),t._v(" "),a("p",[t._v("除此之外还有更多，例如 "),a("code",[t._v("org.bukkit.util.permissions.DefaultPermissions.registerPermission(String name, ...)")]),t._v("、"),a("code",[t._v("org.bukkit.plugin.PluginManager.registerInterface(@NotNull Class<? extends PluginLoader> loader)")]),t._v("，在此处仅解释这三个，平时插件的开发大多也只会用到这三个。它们的调用方法分别是")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Bukkit.getPluginManager().registerEvents(事件监听类, 主类)")])]),t._v(" "),a("li",[a("code",[t._v('Bukkit.getPluginCommand("指令").setExecutor(指令执行器类)')])]),t._v(" "),a("li",[a("code",[t._v('Bukkit.getPluginCommand("指令").setTabCompleter(指令完成器类)')])])]),t._v(" "),a("p",[t._v("在相应的位置填入相应的参数，即可完成注册；注册以后，它们都将发挥它们各自的功能。上述"),a("strong",[t._v("事件监听类")]),t._v("（Event Listener）、"),a("strong",[t._v("指令执行器类")]),t._v("（Command Executor）和"),a("strong",[t._v("指令完成器类")]),t._v("（Tab Completer）分别就是我们所提到的「传入的代表着指令或者事件的对象」——没错，它们也是类。类比主类，它们也存在于自己的 "),a("code",[t._v("java")]),t._v(" 文件中，也有各自的实现方法（因为继承或者实现了特定的接口），在下文我们会详细介绍它们。")]),t._v(" "),a("h2",{attrs:{id:"事件监听类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件监听类"}},[t._v("#")]),t._v(" 事件监听类")]),t._v(" "),a("p",[t._v("要了解这个类，我们得首先知道什么叫做"),a("strong",[t._v("事件（event）")]),t._v("，什么叫做"),a("strong",[t._v("监听（listen）")]),t._v("。设想如下功能：如果我想要在挖完 10 个黑曜石以后，显示一条「10 Obsidians!」的信息，该怎么做？我们的直觉是在挖黑曜石的时候记录。那么我们怎么知道玩家是在挖东西，并且在挖黑曜石而不是在挖别的东西，以及黑曜石有没有掉落等等一系列的问题的答案呢？依靠事件。")]),t._v(" "),a("p",[t._v("我们在 Minecraft 世界里的一举一动实际上都在以事件的形式记录着，大到服务器加载地形，小到我们四处走动，每一分每一秒都有事件被"),a("strong",[t._v("触发（fire）")]),t._v("。记录它们的原因很简单，营造丰富游戏体验的本质就是针对不同的事件给出特定的回应。侦测事件的行为叫做"),a("strong",[t._v("监听")]),t._v("。下面，我们将在开发的角度熟悉事件的监听方法。")]),t._v(" "),a("p",[t._v("让我们先尝试实现一个当玩家加入游戏时，给玩家发送一条问候语 "),a("code",[t._v("Hello! <玩家名>")]),t._v(" 的功能。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("example"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyPlugin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bukkit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Bukkit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bukkit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("entity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Player")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bukkit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EventHandler")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bukkit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Listener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bukkit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("player"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PlayerJoinEvent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyEventListener")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Listener")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@EventHandler")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("onPlayerJoin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PlayerJoinEvent")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Player")]),t._v(" p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPlayer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sendMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello! "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[a("strong",[t._v("Java 语言讲堂 #2")])]),t._v(" "),a("p",[a("code",[t._v("implements <接口>")]),t._v(" 表示当前的类"),a("strong",[t._v("实现")]),t._v("（implements）了一个接口（不同于上面的 "),a("code",[t._v("extends")]),t._v(" 继承）。实现一个接口和继承一个类有很大的肉眼不可见的差别，简单来说，")]),t._v(" "),a("blockquote",[a("p",[t._v("接口是一个模板，它规定了实现了这个接口的类应该放些什么东西；类是一个实体，继承它是为了拥有它先前的一切。")])]),t._v(" "),a("p",[t._v("接口不包含任何实在的方法，而类包含。需要注意的是，"),a("code",[t._v("JavaPlugin")]),t._v(" 这个类是一个 Abstract（抽象）类，抽象类的特点是至少含有一个抽象方法，抽象方法就是没有函数体的方法，相当于一个声明。抽象类由于并不需要真实的方法存在，在某种意义上和接口的概念是一样的，但也有区别。具体可以查看这里："),a("a",{attrs:{href:"https://stackoverflow.com/questions/10040069/abstract-class-vs-interface-in-java",target:"_blank",rel:"noopener noreferrer"}},[t._v("StackOverflow"),a("OutboundLink")],1),t._v("。")])]),t._v(" "),a("p",[t._v("一个事件监听类首先需要实现一个 Listener 接口，相当于是在标记自己是一个监听类。要监听一个事件，请在监听类里添加一个 "),a("code",[t._v("public void")]),t._v(" 方法，名称随意但必须有一个参数接受特定的事件，就像上面的 "),a("code",[t._v("PlayerJoinEvent")]),t._v("，正是这个参数的类型决定了此方法监听的事件。在上面的例子里，当 PlayerJoinEvent 被触发以后，"),a("code",[t._v("onPlayerJoin")]),t._v(" 方法就会被调用。这就实现了事件监听的基本功能。")]),t._v(" "),a("p",[t._v("该方法被调用以后，首先 "),a("code",[t._v("Player p = e.getPlayer()")]),t._v(" 获取了触发这个事件的玩家，然后调用了 "),a("code",[t._v("p.sendMessage(String msg)")]),t._v(" 和 "),a("code",[t._v("p.getName()")]),t._v(" 方法获取玩家的名称并向玩家发送信息。于是这样一个在玩家加入游戏以后就发送欢迎信息的插件就实现了...吗？")]),t._v(" "),a("p",[t._v("别急，我们还没有注册这个事件监听器！要注册它，请前往主类修改 "),a("code",[t._v("onEnable")]),t._v(" 函数。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 别忘了 import！就算是自己写的，位于不同的文件也要 import。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("example"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyPlugin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MyEventListener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("onEnable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 前一个参数是 MyEventListener 实例，后一个参数是继承了 JavaPlugin 的主类实例。")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Bukkit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPluginManager")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("registerEvents")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyEventListener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n")])])]),a("p",[t._v("这样，在插件启用的时候，事件监听器就会被自动注册，从注册时开始，事件监听就已开始。需要注意的是，虽然一个事件监听类里面可以有多个用来监听事件的方法，但应确保它们监听不同的事件，因为同一个事件在一个事件监听类里面只能出现一次，第二次将被忽略。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[a("strong",[t._v("Java 语言讲堂 #3")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("实例")]),t._v("（instance）是指一个类经过实例化（initialize）也就是 "),a("code",[t._v("new XXX()")]),t._v(" 后的结果。例如如果「猫」是一个类，那么「实例化一个猫」就是让一个新的猫诞生的意思，这个新的猫具备自己的性格和特点，但它本质上是猫不变。")]),t._v(" "),a("li",[a("code",[t._v("this")]),t._v(" 代表当前的类实例。如果你想要在一个"),a("strong",[t._v("非静态")]),t._v("（non-static）方法中调用当前的类，就需要使用 "),a("code",[t._v("this")]),t._v("。"),a("code",[t._v("this")]),t._v(" 可以作为值传给需要当前的类实例的函数。如果要以静态的方式访问当前的类，直接写类的全称即可。")])]),t._v(" "),a("p",[t._v("静态和非静态也是面向对象编程的基本概念，可以简单理解为：")]),t._v(" "),a("blockquote",[a("p",[t._v("静态的一切可以直接被外部调用，相当于是把已经写好的函数装在了「类」这个盒子里；非静态（也叫动态 dynamic）的一切需要进行实例化才能被调用，且调用的一切结果均是相对当前实例而言。")])]),t._v(" "),a("p",[t._v("假设「狗」是一个类，它的实例化函数（也就是在实例化的时候调用的函数）接受一个参数 "),a("code",[t._v("name")]),t._v(" 用来定义狗的名字，并且拥有一个方法 "),a("code",[t._v("String getName()")]),t._v(" 来获取狗的名字。假设此时有狗 "),a("code",[t._v("a")]),t._v(" 和 "),a("code",[t._v("b")]),t._v("，它们分别是这样被实例化的："),a("code",[t._v("Dog a = new Dog('Wang'); Dog b = new Dog('WangWang')")]),t._v("，当我们执行它们的方法 "),a("code",[t._v("getName")]),t._v("，即 "),a("code",[t._v("a.getName(); b.getName()")]),t._v("，得到的结果就是 "),a("code",[t._v("Wang")]),t._v(" 和 "),a("code",[t._v("WangWang")]),t._v("——所以说调用的一切结果均是相对当前实例而言。")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[a("strong",[t._v("巧妙地找到自己需要的事件的名字")])]),t._v(" "),a("p",[t._v("在 Bukkit 类 API 中，事件有很多，各自代表的具体事件都不一样，但它们的命名格式都为 "),a("code",[t._v("XXXEvent")]),t._v("，前面的 XXX 用来描述这个事件。")]),t._v(" "),a("p",[t._v("如果你对英语稍有了解，就可以尝试着自己去搜索要用到的事件。例如想要实现一个玩家与村民对话的功能，那么就要考虑「玩家与实体互动」的事件，翻译成英文就是 "),a("code",[t._v("player interact entity")]),t._v("，随便一搜（在 Javadoc 中）就能得出两个结果："),a("code",[t._v("PlayerInteractEntityEvent")]),t._v(" 和 "),a("code",[t._v("PlayerInteractAtEntityEvent")]),t._v("，至于它们的具体区别，自行翻阅 Javadoc 即可了解，然后再按需取用即可。")]),t._v(" "),a("p",[t._v("但是此方法并不总是管用。例如 BlockBreakEvent，虽然它没有 Player 的字样，但是它的注释是 "),a("code",[t._v("Called when a block is broken by a player")]),t._v("。所以在了解到一个事件的存在以后，最好去查一下 Javadoc 了解正确的含义和用法。")])]),t._v(" "),a("p",[t._v("你可能会想：为什么玩家能够通过 "),a("code",[t._v("e.getPlayer()")]),t._v(" 直接获得？玩家 "),a("code",[t._v("Player")]),t._v(" 和事件 "),a("code",[t._v("XXXEvent")]),t._v(" 之间有什么关联吗？实际上，"),a("strong",[t._v("每一个事件里都包含了当前事件所牵涉到的大部分信息，可以通过 "),a("code",[t._v("getXX")]),t._v(" 的方法获得")]),t._v("。PlayerJoinEvent 事件，字面意思就是「玩家加入的事件」，自然与玩家有关系，所以这个事件提供了 "),a("code",[t._v("getPlayer")]),t._v(" 方法来让开发者获取到触发该事件的玩家。所有与玩家相关的事件都具有此方法。")]),t._v(" "),a("p",[t._v("不同的事件之间所包含的方法不一样。例如，BlockBreakEvent 在玩家破环方块的时候被触发，它就拥有一个 "),a("code",[t._v("getBlock")]),t._v(" 方法，用于获取被破坏的方块信息。而这个方法很显然在与方块无关的事件上是没有理由存在的。以此类推，你可以自己找出某个事件所具有的方法，有的时候甚至不用专门查阅文档（如果你有代码提示的话）。")]),t._v(" "),a("p",[t._v("事件不仅有 "),a("code",[t._v("getXX")]),t._v("（获取）类方法，也有 "),a("code",[t._v("setXX")]),t._v("（设置）类方法。"),a("code",[t._v("set")]),t._v(" 类方法用于改变一个事件本身——没错，你可以修改事件。")]),t._v(" "),a("p",[t._v("例如 BlockBreakEvent 上有一个 "),a("code",[t._v("setDropItems")]),t._v(" 方法，它接受一个布尔值。当接收到的是 "),a("code",[t._v("false")]),t._v(" 时，这个方块将不会掉落物品。这时，我们就修改了这个事件，使它违背了它原有的表现。修改事件可以帮助我们实现很多功能，例如只允许有某一种权限的人挖钻石矿掉落，其余的人都不掉落。")]),t._v(" "),a("h3",{attrs:{id:"setcancelled-和-iscancelled"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setcancelled-和-iscancelled"}},[t._v("#")]),t._v(" "),a("code",[t._v("setCancelled")]),t._v(" 和 "),a("code",[t._v("isCancelled")])]),t._v(" "),a("p",[t._v("几乎所有的事件都有一个 "),a("code",[t._v("setCancelled")]),t._v(" 方法，它接受一个布尔值。同时也有一个 "),a("code",[t._v("isCancelled")]),t._v(" 方法，它返回一个布尔值。")]),t._v(" "),a("p",[t._v("对于 "),a("code",[t._v("setCancelled")]),t._v("，当接收到的是 "),a("code",[t._v("true")]),t._v(" 时，就取消当前事件。取消的效果是怎样的具体因事件而异。例如取消 BlockBreakEvent 的效果就是破坏的方块又复原且不掉落物品，相当于没有破坏；取消 PlayerMoveEvent 的效果就是玩家移动后又回到原地，相当于没有移动。至于为什么必须要先破坏再复原、先移动再回到原地，而不是直接无法破坏、无法移动，请参看 1.1 的"),a("RouterLink",{attrs:{to:"/content/1.1.html#服务端"}},[t._v("服务端")]),t._v("环节。")],1),t._v(" "),a("p",[t._v("有些事件并没有这两个方法，故它们是不可取消的。例如 PlayerJoinEvent 就不可取消，我们只能在玩家加入以后将他踢出，但不能阻碍玩家加入，道理是一样的。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[a("strong",[a("code",[t._v("setCancelled")]),t._v(" 和 "),a("code",[t._v("isCancelled")]),t._v(" 与接口（Interface）概念的联系")])]),t._v(" "),a("p",[t._v("是什么让这么多的事件都具有这样的共性呢？实际上，所有拥有这两个方法的事件，都实现了接口 "),a("code",[t._v("Cancellable")]),t._v("（可取消的），而那些不能取消的事件便没有实现该接口。我们可以从这里感受到接口的含义——指导性的统一。")])]),t._v(" "),a("h2",{attrs:{id:"指令执行器类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指令执行器类"}},[t._v("#")]),t._v(" 指令执行器类")]),t._v(" "),a("p",[t._v("下面我们简称指令执行器类为指令执行器。")]),t._v(" "),a("p",[t._v("要了解这个类，我们首先要研究什么是"),a("strong",[t._v("指令")]),t._v("（command）——我们也许早已经熟悉指令，但并不知道指令的本质是什么。实际上，Minecraft 指令是一个参数的集合，在程序中以字符串数组（也就是 "),a("code",[t._v("String[]")]),t._v("）的形式存在。例如指令 "),a("code",[t._v("/myplugin a b c d e")]),t._v(" 放到程序里面，我们最终要针对它处理的数据就是 "),a("code",[t._v('["a", "b", "c", "d", "e"]')]),t._v(" 这样一个数组。最前面的 "),a("code",[t._v("/myplugin")]),t._v(" 起着标示的作用："),a("code",[t._v("/")]),t._v(" 代表这是一个指令而不是一个普通的消息（仅限游戏内），"),a("code",[t._v("myplugin")]),t._v(" 表示这个指令所指向的插件。")]),t._v(" "),a("p",[t._v("如果一个指令找不到所指向的插件就会报错，因为没有可以"),a("strong",[t._v("处理")]),t._v("（handle）这个指令的代码逻辑。我们注册一个指令执行器的目的就是让一个指令能够有一个处理者（handler），这个处理者就是指令执行器。观察我们注册时所调用的函数：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Bukkit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPluginCommand")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"myplugin"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setExecutor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("指令执行器"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("从英语的角度来理解，它是在为一个指令设置一个 executor，这个 executor 就是指令执行器。在 "),a("code",[t._v("setExecutor")]),t._v(" 之前，我们首先获取了这个指令，这一步骤我们是通过 "),a("code",[t._v("Bukkit.getPluginCommand(String name)")]),t._v(" 来实现的。它接受一个字符串，这个字符串的内容就是一个指令开头的内容，也就是上文中的 "),a("code",[t._v("myplugin")]),t._v("。这一步让指令与执行器一一对应。")]),t._v(" "),a("p",[t._v("接下来我们来写一个执行器。一个执行器最基本的结构应该是这样的：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sotap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MissionTap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Commands")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bukkit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Bukkit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bukkit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("command"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Command")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bukkit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("command"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CommandExecutor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bukkit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("command"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CommandSender")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CommandHandler")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CommandExecutor")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("onCommand")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CommandSender")]),t._v(" sender"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Command")]),t._v(" cmd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" label"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// do something awesome")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("它实现了一个 "),a("code",[t._v("CommandExecutor")]),t._v(" 接口，该接口要求类必须有一个 "),a("code",[t._v("boolean onCommand")]),t._v(" 方法用于处理指令。指令执行器相当于一个特殊的事件监听器，监听了一个特殊的指令执行的事件。"),a("code",[t._v("onCommand")]),t._v(" 方法接受四个参数，分别为")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("CommandSender sender")]),t._v(" — 指令的执行者。根据接口的继承情况可以判断，"),a("code",[t._v("CommandSender")]),t._v(" 本质上是一个可以被赋予权限的任意对象。通常情况下执行指令的只有两类对象，一类是玩家，一类是控制台。")]),t._v(" "),a("li",[a("code",[t._v("Command cmd")]),t._v(" — 代表指令的对象。你可以通过 "),a("code",[t._v("cmd.getName()")]),t._v(" 获取到这个指令的全名。")]),t._v(" "),a("li",[a("code",[t._v("String label")]),t._v(" — 代表执行指令时所使用的别名。它与 "),a("code",[t._v("cmd.getName()")]),t._v(" 值可能不一样。")]),t._v(" "),a("li",[a("code",[t._v("String[] args")]),t._v(" — 利用 "),a("code",[t._v('" "')]),t._v("（空格）分隔成的参数数组。")])]),t._v(" "),a("p",[t._v("第一个参数的类 CommandSender 只能代表该指令的执行者，不一定是玩家或者控制台（还有可能是其它插件）。若要判断指令的执行者是玩家，可以通过 "),a("code",[t._v("instanceof")]),t._v(" 实现：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果 sender 是一个 Player 实例")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Player")]),t._v(" p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sender "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Player")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Player")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" sender "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    sender"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sendMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"指令只能由玩家执行。"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// do more things here...")]),t._v("\n")])])]),a("p",[t._v("这样就可以避免指令被控制台调用。这样做的原因有很多，比如有些指令需要通过执行该指令的玩家身上的信息返回结果，而控制台并不具备这些特性，因此这种指令不能由控制台执行。第二个参数代表当前的指令，它包含了这个指令的一些基本信息，比如 "),a("code",[t._v("String cmd.getName()")]),t._v(" 获取指令名称、"),a("code",[t._v("List<String> cmd.getAliases()")]),t._v(" 获取指令的所有别名、"),a("code",[t._v("String cmd.getDescription()")]),t._v(" 获取指令的介绍信息等。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[a("strong",[t._v("离谱的巧合")])]),t._v(" "),a("p",[t._v("今天笔者去读了一下 "),a("a",{attrs:{href:"https://bdn.tdiant.net/#/unit/2-4?id=%e5%91%bd%e4%bb%a4%e6%89%a7%e8%a1%8c%e5%99%a8",target:"_blank",rel:"noopener noreferrer"}},[t._v("Bukkit Development Note"),a("OutboundLink")],1),t._v(" 的相关部分，发现居然这部分的文章结构是一模一样的（用事件监听器来比拟、分别介绍每一个参数、介绍判断是否是玩家，甚至连破折号都是一样的，不过我习惯用一个破折号），太离谱了！上面各个参数的具体含义，我是翻类定义得知的，没想到写的也是差不多一样的内容😅")]),t._v(" "),a("p",[t._v("因为不想推倒重写，在这里说明一下，避免误会，有兴趣的读者可以去读一下 BDN~")])]),t._v(" "),a("p",[t._v("对于第三个参数 "),a("code",[t._v("label")]),t._v("，它反映了该指令执行时所使用的别名。例如，如果你在 "),a("code",[t._v("plugin.yml")]),t._v(" 里为你的指令设定了一个别名，假设为 "),a("code",[t._v("my")]),t._v("，那么在执行 "),a("code",[t._v("/my")]),t._v(" 时 "),a("code",[t._v("label")]),t._v(" 的值就是 "),a("code",[t._v("my")]),t._v("。当用全名 "),a("code",[t._v("myplugin")]),t._v(" 来执行时，"),a("code",[t._v("label")]),t._v(" 就是 "),a("code",[t._v("myplugin")]),t._v("。两种方法都会调用这个 "),a("code",[t._v("onCommand")]),t._v(" 函数，但是对应的 "),a("code",[t._v("label")]),t._v(" 值是不一样的。")]),t._v(" "),a("p",[t._v("第四个参数 "),a("code",[t._v("args")]),t._v(" 是一个指令发挥效用的核心。"),a("code",[t._v("args")]),t._v(" 是一个字符串数组，它是由一个指令从第二位开始由空格分割的每一位所构成的。比如执行 "),a("code",[t._v("/myplugin a b c")]),t._v("，"),a("code",[t._v("args")]),t._v(" 的值就是 "),a("code",[t._v('["a", "b", "c"]')]),t._v("。我们可以通过访问数组元素的方式访问每一个参数。例如 "),a("code",[t._v("args[0]")]),t._v(" 代表的就是 "),a("code",[t._v('"a"')]),t._v("。接下来，我们简单实现一个指令，它的功能大致包含：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("/myplugin hello <玩家名>")]),t._v(" — 向一个玩家发送一条「Hello <玩家名>」的消息；")]),t._v(" "),a("li",[a("code",[t._v("/myplugin broadcast <信息>")]),t._v(" — 广播一条信息；")]),t._v(" "),a("li",[a("code",[t._v("/myplugin help")]),t._v(" — 显示该插件的帮助信息。")])]),t._v(" "),a("p",[t._v("在这里我们发现，不同的 "),a("code",[t._v("args[0]")]),t._v(" 体现了该指令的不同功能，于是不难想到用 "),a("code",[t._v("switch")]),t._v(" 来实现。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CommandHandler")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CommandExecutor")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("onCommand")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CommandSender")]),t._v(" sender"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Command")]),t._v(" cmd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" label"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            sender"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sendMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"请至少提供一个参数。"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hello logic.")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"broadcast"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// broadcast logic.")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"help"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// help logic.")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// default logic.")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("通过 "),a("code",[t._v("switch")]),t._v("，我们可以把不同的 "),a("code",[t._v("args[0]")]),t._v(" 的值分入不同的分支，在这些分支里专门处理相关的内容，这是常见的参数利用方式之一。当玩家输入的指令的前半部分为 "),a("code",[t._v("/myplugin hello")]),t._v(" 时，就会进入 "),a("code",[t._v('case "hello":')]),t._v(" 所在的分支，其它以此类推。")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[a("strong",[t._v("防范数组下标越界")])]),t._v(" "),a("p",[t._v("Java 不是 JavaScript，并不会因为找不到就返回一个 "),a("code",[t._v("undefined")]),t._v(" 了事。")]),t._v(" "),a("p",[t._v("在 Java 中，数组的长度是固定的，这意味着任何超出数组长度的访问行为都是非法的，都会抛出错误，这个错误就是 "),a("code",[t._v("ArrayIndexOutOfBoundsException")]),t._v("。一个错误足以让插件停止运行，因此有必要防范。上面的代码中 "),a("code",[t._v("if (args.length == 0)")]),t._v(" 就是在防范用户输入 "),a("code",[t._v("/myplugin")]),t._v(" 而不带任何参数的情况，在这种情况下如果要获取 "),a("code",[t._v("args[0]")]),t._v("，自然会出现下标越界的错误。")])]),t._v(" "),a("p",[t._v("接下来，我们将以案例的形式实现各个部分的功能。这些案例与指令执行器本身无关，但它有助于你理解 API 中的"),a("em",[t._v("某些部分")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"案例-1-向玩家发送信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#案例-1-向玩家发送信息"}},[t._v("#")]),t._v(" 案例 #1：向玩家发送信息")]),t._v(" "),a("p",[t._v("我们的指令的格式为 "),a("code",[t._v("/myplugin hello <玩家名>")]),t._v("，因此玩家名应该在 "),a("code",[t._v("args[1]")]),t._v(" 的位置。具体实现如下：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 避免参数不满足")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        sender"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sendMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"请输入玩家名。"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里的 return 语句提前结束了分支，下面的一切都不会被执行")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Player")]),t._v(" target "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Bukkit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPlayer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        sender"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sendMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"玩家不存在。"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isOnline")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sendMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello! "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sendMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"玩家不在线。"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("原来向玩家发送信息之前还有这么多的检查工作！")]),t._v(" "),a("p",[t._v("首先，我们要检查参数的长度是否正常，避免下标越界。然后，我们要利用 API 提供的方法获取该玩家。可用的方法有 "),a("code",[t._v("Bukkit.getPlayer(String | UUID identifier)")]),t._v(" 和 "),a("code",[t._v("<plugin>.getServer().getPlayer(String | UUID identifier)")]),t._v("，其中前者直接静态调用 "),a("code",[t._v("Bukkit")]),t._v(" 的方法，后者需要从主类的实例上调用。根据 API 的描述，如果玩家不存在，此方法将返回 "),a("code",[t._v("null")]),t._v("，所以我们也要确保玩家输入的 ID 获取到的玩家是存在的，即确保此方法的返回值不为 "),a("code",[t._v("null")]),t._v("，如果是 "),a("code",[t._v("null")]),t._v(" 则提醒玩家，目标玩家不存在。")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[a("strong",[t._v("防范空指针异常")])]),t._v(" "),a("p",[t._v("空指针异常，也就是 "),a("code",[t._v("NullPointerException")]),t._v("，相信是最为普遍的错误了，根本原因是把 "),a("code",[t._v("null")]),t._v(" 的值带到了不该有 "),a("code",[t._v("null")]),t._v(" 的地方。为什么会有这么多空指针错误呢？因为在 Java 编程中，一个方法返回 "),a("code",[t._v("null")]),t._v(" 的情况很常见，而且还存在 "),a("code",[t._v("Objects.requireNonNull(Object obj)")]),t._v(" 这种方法（这个方法如果发现传入对象是 "),a("code",[t._v("null")]),t._v(" 就会抛出 NPE），导致一旦处理不好，NPE 随时有可能出现。")]),t._v(" "),a("p",[t._v("NPE 的棘手之处在于，如果不经过排查或者熟悉，你很难知道到底是哪个地方出现了 "),a("code",[t._v("null")]),t._v("。因此在写程序的时候，时刻思考 "),a("code",[t._v("null")]),t._v(" 并提防 "),a("code",[t._v("null")]),t._v(" 很重要！")])]),t._v(" "),a("p",[t._v("最后，我们需要调用 Player 实例上的方法 "),a("code",[t._v("boolean isOnline")]),t._v(" 来判断该玩家是否在线，如果在线则调用 "),a("code",[t._v("void sendMessage(String msg)")]),t._v(" 向对方发送一个 "),a("code",[t._v("Hello! <玩家名>")]),t._v(" 的信息。")]),t._v(" "),a("h4",{attrs:{id:"案例-2-让服务器广播信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#案例-2-让服务器广播信息"}},[t._v("#")]),t._v(" 案例 #2：让服务器广播信息")]),t._v(" "),a("p",[t._v("服务器广播信息与向用户发送信息的本质区别是，一个全服的人包括控制台都看得见信息，一个只有用户自身可以看得见信息，控制台能看到记录。后者通过 "),a("code",[t._v("Player.sendMessage(String msg)")]),t._v(" 方法可实现，前者通过 "),a("code",[t._v("<plugin>.getServer().broadcast(String msg, String permission)")]),t._v(" 和 "),a("code",[t._v("<plugin>.getServer().broadcastMessage(String msg)")]),t._v(" 可实现。注意 "),a("code",[t._v("<plugin>.getServer()")]),t._v(" 是从主类实例调用的，也可以替换成 "),a("code",[t._v("Bukkit")]),t._v(" 来静态调用。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("broadcast(String msg, String permission)")]),t._v(" — 向所有具有 "),a("code",[t._v("permission")]),t._v(" 的值所指的权限节点对应的权限的玩家广播信息。")]),t._v(" "),a("li",[a("code",[t._v("broadcastMessage(String msg)")]),t._v(" — 向全服的玩家广播信息。")])]),t._v(" "),a("p",[t._v("我们在这里使用第二个方法。于是案例可以这样写：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"broadcast"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        sender"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sendMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"请输入信息内容。"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Bukkit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("broadcastMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("这回很简单，只用做一个验证。")]),t._v(" "),a("h4",{attrs:{id:"案例-3-显示一个插件的指令帮助"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#案例-3-显示一个插件的指令帮助"}},[t._v("#")]),t._v(" 案例 #3：显示一个插件的指令帮助")]),t._v(" "),a("p",[t._v("指令帮助在插件内很常见，几乎所有的插件都有一个专门的帮助页面。帮助页面的本质是向指令执行者发送的一连串固定的（提前写好的）信息。我们可以这样写：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"help"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    sender"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sendMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"MyPlugin 指令帮助"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    sender"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sendMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/myplugin hello <玩家名> — 向指定玩家发送 Hello! 信息"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    sender"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sendMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/myplugin broadcast <信息> — 全服广播信息"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    sender"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sendMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/myplugin help — 查看帮助页面"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("但是这样的帮助页面似乎显得很单调，因为没有了颜色的加持，显示在游戏里都是白色。对于颜色和格式代码的介绍，将放在后面的一章内讲解，敬请期待。")]),t._v(" "),a("p",[t._v("也许因为我们这个插件的功能很简单，所以要写的帮助文本不是很多。那么如果将来的指令变得很多，都要一行一行地 "),a("code",[t._v("sendMessage")]),t._v(" 吗？并不是，我们可以用循环来帮助我们发送信息，这样我们只需要写一行 "),a("code",[t._v("sendMessage")]),t._v("。大体思路如下：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"help"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" helpTexts "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"我是第一行文本"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"我是第二行文本"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"我是第三行文本"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"我是第 N 行文本"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" t "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" helpTexts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        sender"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sendMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[a("strong",[t._v("Java 语言讲堂 #4")])]),t._v(" "),a("p",[t._v("Java 中的 "),a("code",[t._v("for")]),t._v(" 循环有三种形式：")]),t._v(" "),a("ul",[a("li",[t._v("普通 — "),a("code",[t._v("for (def; term; incr) {}")]),t._v(" 第一个参数为定义，第二个参数为终止条件，第三个参数为自增操作。")]),t._v(" "),a("li",[t._v("无限循环 — "),a("code",[t._v("for ( ; ; ) {}")]),t._v(" 没有定义，没有终止，没有自增。")]),t._v(" "),a("li",[t._v("增强（enhanced）循环（遍历）— "),a("code",[t._v("for (def : target)")]),t._v(" 第一个参数为定义，中间为冒号 "),a("code",[t._v(":")]),t._v("，第二个参数为遍历对象（对象必须是"),a("strong",[t._v("可遍历的")]),t._v("（Iterable），例如 "),a("code",[t._v("List")]),t._v("、数组等都可以被遍历）")])]),t._v(" "),a("p",[t._v("第三种形式就是上面我们所使用的，它是在这种需求下所建议使用的方法。它等价于传统的 "),a("code",[t._v("for (int i = 0; i < target.length; i++)")]),t._v("。")])]),t._v(" "),a("p",[t._v("这里我们用到了 Java 的 enhanced for 循环，它遍历 "),a("code",[t._v("helpTexts")]),t._v(" 这个字符串数组。我们在这个数组里写几行，它都会一次次遍历并用 "),a("code",[t._v("sendMessage")]),t._v(" 发出去，因此我们在添加内容时，只需要对数组做出改动而不再需要改动下面的输出代码了，比上面的好几行 "),a("code",[t._v("sendMessage")]),t._v(" 要简洁不少。")]),t._v(" "),a("h2",{attrs:{id:"指令完成器类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指令完成器类"}},[t._v("#")]),t._v(" 指令完成器类")]),t._v(" "),a("p",[t._v("下面我们简称指令完成器类为指令完成器。")]),t._v(" "),a("p",[t._v("指令完成器主要用于为一个指令添加自动补全功能。自动补全在游戏内可以通过在键入指令时按下 "),a("kbd",[t._v("tab")]),t._v(" 键来实现。指令完成器类的本质也是一个事件监听器，与指令执行器不同，指令完成器监听的 TabComplete 这样一个事件。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("指令的自动补全功能是在 Minecraft Java 版 1.12 加入的。")])]),t._v(" "),a("p",[t._v("要注册指令完成器，可以在 Command 实例上调用方法。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Bukkit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPluginCommand")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"myplugin"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTabCompleter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("指令完成器"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("一个指令完成器的基本结构如下：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Tab")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TabCompleter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" COMPLETION "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* ... */")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("onTabComplete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CommandSender")]),t._v(" sender"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Command")]),t._v(" command"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" alias"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("command"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("equalsIgnoreCase")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"myplugin"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// result.add(xxx)")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("指令完成器实现了 "),a("code",[t._v("TabCompleter")]),t._v(" 接口，该接口要求 Override 一个 "),a("code",[t._v("List<String> onTabComplete")]),t._v(" 方法。该方法返回一个 "),a("code",[t._v("List<String>")]),t._v(" 作为自动补全的内容。为了返回这个 "),a("code",[t._v("List<String>")]),t._v("，我们需要在方法的开头初始化一个 "),a("code",[t._v("List<String>")]),t._v(" 的结果变量 "),a("code",[t._v("result")]),t._v("。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[a("strong",[t._v("Java 语言讲堂 #5")])]),t._v(" "),a("p",[t._v("List 是 Java 中的一种可以动态修改的数组，分为 ArrayList（数组）和 LinkedList（链表）两种。前者的使用较为广泛，多用于只需要在末尾添加或删除元素的情况。")]),t._v(" "),a("p",[t._v("要开始使用 List，必须先进行初始化，即创建一个 List 实例。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 限定为 ArrayList")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 同时指定类型")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// var 关键字")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("通用形式 "),a("code",[t._v("List<T> a = new ArrayList<T?>();")]),t._v("，T 处填写泛型数据类型。如果前面填写了后面可以不填，写成 "),a("code",[t._v("<>")]),t._v("（被称为「钻石 diamond」）；"),a("code",[t._v("var")]),t._v(" 关键字用于自动推断变量的类型，使用时后面的 "),a("code",[t._v("ArrayList")]),t._v(" 必须带有泛型。")])]),t._v(" "),a("p",[t._v("我们在这个结果变量里添加的内容，就是返回到用户执行的指令的自动补全里的内容。在 1.13 以后，指令自动补全的结果会在一个黑框内显示。")]),t._v(" "),a("p",[t._v("很显然，上面的结构并不能实现功能，总感觉缺了点什么。在实现这一切之前，我们需要先看清楚一个指令是如何被自动补全的。首先，我们输入这个指令的全名：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("/mypl\n    ^\n")])])]),a("p",[a("em",[t._v("用 "),a("code",[t._v("^")]),t._v(" 代指光标所在位置")])]),t._v(" "),a("p",[t._v("此时会有一个由服务端提供的自动补全，帮助你补全指令的全名。它获取了所有已经注册的指令和别名。这样的补全有如下特点：")]),t._v(" "),a("ul",[a("li",[t._v("根据已经输入的内容进行补全。例如输入 "),a("code",[t._v("m")]),t._v("，那么只会继续补全以 "),a("code",[t._v("m")]),t._v(" 开头的内容；输入 "),a("code",[t._v("my")]),t._v("，那么只会继续补全以 "),a("code",[t._v("my")]),t._v(" 开头的内容，以此类推。")]),t._v(" "),a("li",[t._v("补全的内容都是已经被认定为可用的。")])]),t._v(" "),a("p",[t._v("因此，要实现我们插件的补全，也要达成上面两项要求。以下展示了达成上面两项要求的代码。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Tab")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TabCompleter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" ARG_0_COMPLETION "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"broadcast"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"help"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Tab")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAvailableCommands")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Player")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" available "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" cmd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" ARG_0_COMPLETION"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasPermission")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"myplugin."')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" cmd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                available"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cmd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" available"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getResult")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" commands"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringUtil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("copyPartialMatches")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" commands"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collections")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("onTabComplete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CommandSender")]),t._v(" sender"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Command")]),t._v(" command"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" alias"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getResult")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAvailableCommands")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Player")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" sender"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("变得复杂多了。但是通过我们的解释，你仍然能够理解它的每一部分都是干什么的。我们依然从 "),a("code",[t._v("onTabComplete")]),t._v(" 看起。")]),t._v(" "),a("p",[t._v("首先，初始一个变量 "),a("code",[t._v("List<String> result")]),t._v(" 作为自动补全的结果变量。然后判断 "),a("code",[t._v("if (args.length == 1)")]),t._v(" 用于"),a("strong",[t._v("确定当前所补全的参数所在的位置")]),t._v("。这一步是因为每在指令中打一个字符，"),a("code",[t._v("onTabComplete")]),t._v(" 这个函数就会被执行一次，所以 "),a("code",[t._v("args.length")]),t._v(" 是随时改变的。如果 "),a("code",[t._v("args.length == 1")]),t._v(" 返回 "),a("code",[t._v("true")]),t._v("，就代表当前处于第一个参数的位置，以此类推。在这里我们就可以得知要补全的是第一个参数。")]),t._v(" "),a("p",[t._v("接下来对 "),a("code",[t._v("result")]),t._v(" 赋值，调用了一个 "),a("code",[t._v("getResult(String, List<String>)")]),t._v(" 函数和 "),a("code",[t._v("getAvailableCommands(Player)")]),t._v(" 函数。")]),t._v(" "),a("h4",{attrs:{id:"getavailablecommands-player"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getavailablecommands-player"}},[t._v("#")]),t._v(" "),a("code",[t._v("getAvailableCommands(Player)")])]),t._v(" "),a("p",[t._v("该函数用于获取对一个玩家可用的补全项，用来满足我们上文中提到的条件二")]),t._v(" "),a("blockquote",[a("p",[t._v("补全的内容都是已经被认定为可用的。")])]),t._v(" "),a("p",[t._v("我们补全的应当是对当前用户可用的内容。可用的决定是多因素的，我们在这里只考虑权限因素。如果用户没有相应的权限，自然也没必要补全这一项，因此我们需要使用这个函数，先针对一个 "),a("code",[t._v("Player")]),t._v(" 获取他所能使用的项目，然后返回。这相当于是一层筛选。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAvailableCommands")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Player")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" available "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" cmd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" ARG_0_COMPLETION"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasPermission")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"myplugin."')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" cmd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            available"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cmd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" available"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("其实很好理解，先创建一个 "),a("code",[t._v("available")]),t._v(" 用来存储结果并返回，然后利用 enhanced for 来遍历 "),a("code",[t._v("ARG_0_COMPLETION")]),t._v("。"),a("code",[t._v("ARG_0_COMPLETION")]),t._v(" 是我们手动填写的，针对 "),a("code",[t._v("args[0]")]),t._v("（也就是参数的第一个位置）的所有补全内容，以 "),a("code",[t._v("final String[]")]),t._v(" 的形式放置在 Tab 类里面。")]),t._v(" "),a("p",[t._v("遍历的目的是筛选玩家有权限的部分。判断 "),a("code",[t._v('if (p.hasPermission("myplugin." + cmd))')]),t._v("，如果是则添加到 "),a("code",[t._v("available")]),t._v(" 结果变量里，最终返回。如果没有符合的，最终返回的将是一个空的 "),a("code",[t._v("List")]),t._v("（千万不能返回一个 "),a("code",[t._v("null")]),t._v(" 了事！）。")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[a("code",[t._v('p.hasPermission("myplugin." + cmd)')]),t._v(" 这种判断方式，仅适用于已经在 "),a("code",[t._v("plugin.yml")]),t._v(" 按照此种格式（即 "),a("code",[t._v("myplugin.参数名")]),t._v("）定义了相应权限的情形，这也是较为简便的处理方式，但不止这一种。")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[a("strong",[t._v("遍历的高级写法")])]),t._v(" "),a("p",[t._v("遍历、判断再添加是一种较为传统的方式，其实还有下面这些较为高级的写法：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一行解决，推荐")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" available "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arrays")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("asList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ARG_0_COMPLETION"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("stream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasPermission")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"myplugin."')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("collect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collectors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// lambda")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arrays")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("asList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ARG_0_COMPLETION"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasPermission")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"myplugin."')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        available"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cmd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),a("h4",{attrs:{id:"getresult-string-list-string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getresult-string-list-string"}},[t._v("#")]),t._v(" "),a("code",[t._v("getResult(String, List<String>)")])]),t._v(" "),a("p",[t._v("该函数用来获取最终的结果，第一个参数是当前的参数 "),a("code",[t._v("args[0]")]),t._v("，第二个参数是经过筛选以后的补全值数组。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getResult")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" commands"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringUtil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("copyPartialMatches")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" commands"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collections")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("首先还是初始化了一个 "),a("code",[t._v("result")]),t._v("，然后利用 "),a("code",[t._v("StringUtil.copyPartialMatches(arg, commands, result)")]),t._v(" 来为 "),a("code",[t._v("result")]),t._v(" 赋值。这一步主要完成的是"),a("strong",[t._v("根据当前的输入情况从 "),a("code",[t._v("commands")]),t._v(" 中抽取部分匹配的部分复制到 "),a("code",[t._v("result")]),t._v(" 中")]),t._v("。例如")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("/myplugin broa\n             ^\n")])])]),a("p",[t._v("由于每打一个字，"),a("code",[t._v("onTabComplete")]),t._v(" 都会被执行一次，所以 "),a("code",[t._v("args[0]")]),t._v(" 时刻反映当前位于参数位第一位的值。")]),t._v(" "),a("p",[t._v("因此，当我们输入到这里时，"),a("code",[t._v("args[0]")]),t._v(" 的值实际上是 "),a("code",[t._v("broa")]),t._v(" 四个字母。将这四个字母输入到此函数中作为第一个参数，那么 "),a("code",[t._v("StringUtil.copyPartialMatches")]),t._v(" 就会从此函数的第二个参数 "),a("code",[t._v("commands")]),t._v("（假设为 "),a("code",[t._v('{"broadcast", "help", "hello"}')]),t._v("）中抽取包含 "),a("code",[t._v("broa")]),t._v(" 的部分，也就是 "),a("code",[t._v("broadcast")]),t._v(" 这个元素，将它放到 "),a("code",[t._v("StringUtil.copyPartialMatches")]),t._v(" 接受的第三个参数 "),a("code",[t._v("result")]),t._v(" 中。因此这个时候 "),a("code",[t._v("result")]),t._v(" 就包含一项内容 "),a("code",[t._v("broadcast")]),t._v("，最终将该内容返回到我们刚开始的地方，作为 "),a("code",[t._v("onTabComplete")]),t._v(" 函数的输出，完成补全。")]),t._v(" "),a("p",[t._v("在这里我们就实现了我们提到的要求中的第一条")]),t._v(" "),a("blockquote",[a("p",[t._v("根据已经输入的内容进行补全。例如输入 "),a("code",[t._v("m")]),t._v("，那么只会继续补全以 "),a("code",[t._v("m")]),t._v(" 开头的内容；输入 "),a("code",[t._v("my")]),t._v("，那么只会继续补全以 "),a("code",[t._v("my")]),t._v(" 开头的内容，以此类推。")])]),t._v(" "),a("p",[t._v("下一句 "),a("code",[t._v("Collections.sort(result)")]),t._v(" 在对内容进行整理，例如字母排序等，为了让内容多的时候更加整齐划一。在这里由于我们举得例子里面的参数比较少，所以这一句没有什么明显的效果。")]),t._v(" "),a("p",[t._v("以上就是一个指令完成器的基本实现，借助该实现里的方法，你可以写关于 "),a("code",[t._v("args[1]")]),t._v("、"),a("code",[t._v("args[2]")]),t._v(" 的补全来适应更加复杂的指令，不过一般用不到那里。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[a("strong",[t._v("把指令执行器与完成器相结合")])]),t._v(" "),a("p",[t._v("Bukkit API 提供了一个接口 "),a("code",[t._v("TabExecutor")]),t._v(" 用来方便同时实现 "),a("code",[t._v("TabCompleter")]),t._v(" 和 "),a("code",[t._v("CommandExecutor")]),t._v("。也就是说，你可以选择只让一个类实现 "),a("code",[t._v("TabExecutor")]),t._v(" 这个接口，然后在这个类里面同时 Override "),a("code",[t._v("onCommand")]),t._v(" 和 "),a("code",[t._v("onTabComplete")]),t._v("，一样可以达到效果。在注册的时候，两个地方填写同样的实例即可。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);